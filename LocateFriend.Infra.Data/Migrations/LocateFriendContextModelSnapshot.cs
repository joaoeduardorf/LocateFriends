// <auto-generated />
using LocateFriend.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LocateFriend.Infra.Data.Migrations
{
    [DbContext(typeof(LocateFriendContext))]
    partial class LocateFriendContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Locate.Domain.Entities.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Locate.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<int?>("FriendId");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("FriendId")
                        .IsUnique()
                        .HasFilter("[FriendId] IS NOT NULL");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Locate.Domain.Entities.Location", b =>
                {
                    b.HasOne("Locate.Domain.Entities.Friend", "Friend")
                        .WithOne("Location")
                        .HasForeignKey("Locate.Domain.Entities.Location", "FriendId");
                });
#pragma warning restore 612, 618
        }
    }
}
